# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  api:
    env_file:
      - .env
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: dev
      args:
        - PORT=${API_PORT}
        - WILDFIRE_API_URL=${WILDFIRE_API_URL}
        - DATABASE_URL=${DATABASE_URL}
    environment:
      NODE_ENV: development
    healthcheck:
      test: ["CMD", "wget", "localhost:${API_PORT}/health -q -O - > /dev/null 2>&1"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - 109225-network
    ports:
      - ${API_PORT}:${API_PORT}
    volumes:
      - ./:/usr/109225
    depends_on:
      db:
        condition: service_healthy
  db:
    hostname: ${POSTGRES_HOST}
    image: postgres
    restart: always
    user: ${POSTGRES_USER}
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - 109225-network

networks:
  109225-network:
    name: 109225-network
volumes:
  db-data: